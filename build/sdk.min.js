define('Utils',[], function() {

	//---------------------------------------------------  
	// 日期格式化  
	// 格式 YYYY/yyyy/YY/yy 表示年份  
	// MM/M 月份  
	// W/w 星期  
	// dd/DD/d/D 日期  
	// hh/HH/h/H 时间  
	// mm/m 分钟  
	// ss/SS/s/S 秒  
	//---------------------------------------------------  
	Date.prototype.Format = function(formatStr) {
		var str = formatStr;
		var Week = ['日', '一', '二', '三', '四', '五', '六'];

		str = str.replace(/yyyy|YYYY/, this.getFullYear());
		str = str.replace(/yy|YY/, (this.getYear() % 100) > 9 ? (this
				.getYear() % 100).toString() : '0' +
			(this.getYear() % 100));

		str = str.replace(/MM/, this.getMonth() > 9 ? this.getMonth()
			.toString() : '0' + this.getMonth());
		str = str.replace(/M/g, this.getMonth());

		str = str.replace(/w|W/g, Week[this.getDay()]);

		str = str.replace(/dd|DD/, this.getDate() > 9 ? this.getDate()
			.toString() : '0' + this.getDate());
		str = str.replace(/d|D/g, this.getDate());

		str = str.replace(/hh|HH/, this.getHours() > 9 ? this
			.getHours().toString() : '0' + this.getHours());
		str = str.replace(/h|H/g, this.getHours());
		str = str.replace(/mm/, this.getMinutes() > 9 ? this
			.getMinutes().toString() : '0' + this.getMinutes());
		str = str.replace(/m/g, this.getMinutes());

		str = str.replace(/ss|SS/, this.getSeconds() > 9 ? this
			.getSeconds().toString() : '0' + this.getSeconds());
		str = str.replace(/s|S/g, this.getSeconds());
		str = str.replace(/u|U/g, (this.getMilliseconds() / 1000 + "00000").substring(2, 5));
		return str;
	}
	// in Simple {'prefix_name':int_value}
	// Get id by name 
	// Get name by id
	// Type , Prefix ,Map
	return {
		enumMap: {},
		EnumMapRegister: function(collection, prefix) {
			this.enumMap[prefix] = {
				'collection': collection, // keyName => IntValue
				'reverse': [], // IntValue => keyName
			};
			for(var key in collection) {
				this.enumMap[prefix]['reverse'][collection[key]] = key;
			}
		},
		EnumGetKey: function(prefix, ID) {
			var ret = this.enumMap[prefix]['reverse'][ID];
			if(undefined === ret) {
				return ret;
			}
			return ret.replace(prefix, '');
		},
		EnumGetValue: function(prefix, key) {
			return this.enumMap[prefix]['collection'][(prefix + key).toUpperCase()];
		},
		now: function() {
			//					return (new Date()).Format('yyyy-MM-dd HH:mm:ss');
			return(new Date()).Format('HH:mm:ss.u');
		},
		containGetKey: function(collection, value) {
			for(var key in collection) {
				if(collection[key] == value) {
					return key;
				}
			}
			return false;
		},
		extend: function(Child, Parent) {
			var F = function() {};
			F.prototype = Parent.prototype;
			Child.prototype = new F();
			Child.prototype.constructor = Child;
			Child.uber = Parent.prototype;
		},
		extendOptions: function(defaultOptions, options) {
			for(var i in options) {
				if(typeof options[i] == 'function') {
					defaultOptions[i] = options[i];
					continue;
				}
				if(options[i] instanceof Object) {
					for(var j in options[i]) {
						if(typeof options[i][j] == 'function') {
							defaultOptions[i][j] = options[i][j];
							continue;
						}
						if(options[i][j] instanceof Object) {
							for(var k in options[i][j]) {
								defaultOptions[i] = defaultOptions[i] ? defaultOptions[i] : {};
								defaultOptions[i][j] = defaultOptions[i][j] ? defaultOptions[i][j] : {};
								defaultOptions[i][j][k] = options[i][j][k];
							}
						} else {
							defaultOptions[i] = defaultOptions[i] ? defaultOptions[i] : {};
							defaultOptions[i][j] = options[i][j];
						}
					}
				} else {
					defaultOptions[i] = options[i];
				}
			}
			return defaultOptions;
		},
		getRandomNum4: function() {
			var rnd = '' + Math.floor(Math.random() * 10000);
			while(rnd.length < 4) rnd = '0' + rnd;
			return rnd;
		},
		getSequence: function() {
			var rnd = '' + Math.floor(Math.random() * 1000);
			while(rnd.length < 3) rnd = '0' + rnd;
			var st = this.timestamp() + '';
			//					console.log(st);
			return st.substring(0, 3) + st.substring(6) + rnd;
		},
		timestamp: function() {
			return parseInt((new Date()).valueOf() / 1000);
		},
		loadProtoFile: function(filename) {
			var builder = ProtoBuf.loadProtoFile(filename);
			return builder.build();
		},
		loadProtoString: function(string) {
			var builder = ProtoBuf.loadProto(string);
			return builder.build();
		},
		ten2sixteen: function(d) {
			return [d >> 8, d & 0xff];
		},
		hex2IntArray: function(hexStr) {
			if(hexStr.length % 2) {
				hexStr = hexStr + '0';
			}
			var intArray = [];
			for(var i = 0; i < hexStr.length; i += 2) {
				var s = hexStr.substr(i, 2);
				intArray[i / 2] = parseInt(s, 16);
			}
			return intArray;
		},
		intArray2HexStr: function(intArray) {
			var sss = '';
			for(var i = 0; i < intArray.length; i++) {
				var s = parseInt(intArray[i]).toString(16);
				if(s.length == 1) {
					s = '0' + s;
				}
				sss += s;
			}
			return sss;
		},
		getOptionOrDefault: function(options, key, defaultValue) {
			if(!options) {
				return defaultValue;
			}
			return options[key] === undefined ? defaultValue : options[key];
		},
		HOTP: function(K, C) {
			var key = sjcl.codec.base32.toBits(K);
			// Count is 64 bits long. Note that JavaScript bitwise
			// operations
			// make
			// the MSB effectively 0 in this case.
			var count = [((C & 0xffffffff00000000) >> 32),
				C & 0xffffffff
			];
			var otplength = 6;

			var hmacsha1 = new sjcl.misc.hmac(key, sjcl.hash.sha1);
			var code = hmacsha1.encrypt(count);

			var offset = sjcl.bitArray.extract(code, 152, 8) & 0x0f;
			var startBits = offset * 8;
			var endBits = startBits + 4 * 8;
			var slice = sjcl.bitArray
				.bitSlice(code, startBits, endBits);
			var dbc1 = slice[0];
			var dbc2 = dbc1 & 0x7fffffff;
			var otp = dbc2 % Math.pow(10, otplength);
			var result = otp.toString();
			while(result.length < otplength) {
				result = '0' + result;
			}
			return result;
		},
		base32_encode: function(str) {
			var base32Map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
				len = str.length,
				b32 = '',
				rest = 0,
				restLen = 0;
			for(var i = 0; i < len; i++) {
				var chrCode = str.charCodeAt(i),
					thisByte = rest << 8 |
					chrCode,
					thisByteLen = restLen + 8;
				while(thisByteLen >= 5) {
					b32 += base32Map
						.charAt(thisByte >> (thisByteLen - 5));
					thisByteLen -= 5;
					thisByte = thisByte &
						(Math.pow(2, thisByteLen) - 1);
				}
				rest = thisByte;
				restLen = thisByteLen;
			}
			if(restLen > 0) {
				rest = rest << (5 - restLen);
				b32 += base32Map.charAt(rest);
			}
			return b32;
		},
		array_reverse: function(data) {
			var map = [];
			for(var key in data) {
				map[data[key]] = key;
			}
			return map
		},
		ajax: function(options) {
			options = options || {};
			options.method = (options.method || "GET").toUpperCase();
			options.dataType = options.dataType || "json";
			options.async = options.async === undefined ? true : options.async;
			var params = this.formatParams(options.data);
			//创建 - 非IE6 - 第一步
			if(window.XMLHttpRequest) {
				var xhr = new XMLHttpRequest();
			} else { //IE6及其以下版本浏览器
				var xhr = new ActiveXObject('Microsoft.XMLHTTP');
			}
			//接收 - 第三步
			xhr.onreadystatechange = function() {
				if(xhr.readyState == 4) {
					var status = xhr.status;
					if(status >= 200 && status < 300) {
						if('json' == options.dataType) {
							// validate json
							var jsonObj = false;
							try {
								var jsonObj = JSON.parse(xhr.responseText);
							} catch(e) {
								jsonObj = false;
							}
							if(false === jsonObj) {
								options.success && options.success(xhr.responseText, xhr.responseXML);
							} else {
								options.success && options.success(jsonObj, xhr);
							}
						} else {
							options.success && options.success(xhr.responseText, xhr.responseXML);
						}
					} else {
						options.fail && options.fail(status);
					}
				}
			}
			//连接 和 发送 - 第二步
			if(options.method == "GET") {
				xhr.open("GET", options.url + "?" + params, options.async);
				xhr.send(null);
			} else if(options.method == "POST") {
				xhr.open("POST", options.url, options.async);
				//设置表单提交时的内容类型
				xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
				xhr.send(params);
			}
		},
		formatParamsRecursively: function(object, prefix) {
			var ret = [],
				pre = '';
			for(var i in object) {
				if(typeof object[i] == 'object') {
					if(prefix) {
						pre = prefix + '[' + i + ']';
					} else {
						pre = i;
					}
					ret = ret.concat(this.formatParamsRecursively(object[i], pre));
				} else {
					if(prefix) {
						ret.push(encodeURIComponent(prefix + '[' + i + ']') + "=" + encodeURIComponent(object[i]));
					} else {
						ret.push(encodeURIComponent(i) + "=" + encodeURIComponent(object[i]));
					}
				}
			}
			return ret;
		},
		//格式化参数
		formatParams: function(data) {
			var arr = [];
			arr = this.formatParamsRecursively(data, '');
			arr.push(("v=" + Math.random()).replace(".", ""));
			return arr.join("&");
			for(var name in data) {
				if(typeof data[name] == 'object') {
					for(var n1 in data[name]) {
						if(typeof data[name][n1] == 'object') {
							for(var n2 in data[name][n1]) {
								arr.push(name + '[' + n1 + '][' + n1 + ']=' + encodeURIComponent(data[name][n1][n2]));
							}
						} else {
							arr.push(name + "[" + n1 + "]=" + encodeURIComponent(data[name][n1]));
						}
					}
				} else {
					arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(data[name]));
				}
			}
			arr.push(("v=" + Math.random()).replace(".", ""));
			return arr.join("&");
		},
		validateCallback: function(func) {
			return(undefined !== func && typeof func == 'function');
		},
		isFunction: function(obj) {
			return Object.prototype.toString.call(obj) === '[object Function]'
		},
		fireFunction: function(func, params) {
			if(func && this.isFunction(func)) {
				return func.apply('', params);
			}
			return false;
		},
		array_get: function(array, key, defaultValue) {
			var config = array,
				keys;
			if(typeof key == 'object' && key instanceof Array) {
				keys = key;
			} else {
				if(key.indexOf('.') != -1) {
					keys = key.split('.');
				} else {
					keys = [key];
				}
			}
			for(var i in keys) {
				if(undefined == config[keys[i]]) {
					return defaultValue;
				} else {
					config = config[keys[i]];
				}
			}
			return config;
		}
	};
});
define('Logger',['Utils'],function(Utils) {
	return {
		logLevel : 'log',
		setLevel : function(level){
			this.logLevel = level;
		},
		debug : function() {
			this.logData('debug', arguments);
		},
		info : function() {
			this.logData('info', arguments);
		},
		notice : function() {
			this.logData('notice', arguments);
		},
		warning : function() {
			this.logData('warning', arguments);
		},
		error : function() {
			this.logData('error', arguments);
		},
		log : function() {
			this.logData('log', arguments);
		},
		levelCompare : function(maxLevel, nowLevel) {
			var level = {
				'log' : 1,
				'debug' : 2,
				'info' : 3,
				'notice' : 4,
				'warning' : 5,
				'error' : 6,
			};
			if (!level[nowLevel] || !level[maxLevel]) {
				return false;
			}
			return level[nowLevel] >= level[maxLevel];
		},
		logData : function(level, data) {
			if (data.length > 0
					& this.levelCompare(this.logLevel, level)) {
				
				var levelColor = {
					'log' : 'black',
					'debug' : 'grey',
					'info' : 'green',
					'notice' : 'blue',
					'warning' : 'orange',
					'error' : 'red',
				};
				
				var dateStr = "%c[" + Utils.now() + "] " + level + ":";
				var output;
//				if (typeof data[0] == "string") {
//					data[0] = (dateStr += data[0]);
//					output = data;
//				} else {
					output = new Array();
					output.push(dateStr);
					output.push("font-weight:bold;color: " + levelColor[level]);
					for ( var i in data) {
						output.push(data[i]);
					}
//				}
				return console.log.apply(console, output);
			}
		}
	};
});

define('WS',['Logger'], function(Logger) {
	var logger = Logger;
	var ws = {
		options: {
			reconnectInterval: 2000,
		},
		lockReconnect: false,
		wsObj: null,
		wsUrl: "",
		reconnect: function(url) {
			if(this.lockReconnect) return;
			this.lockReconnect = true;
			var self = this;
			setTimeout(function() { //没连接上会一直重连，设置延迟避免请求过多
				self.createWebSocket(url);
				self.lockReconnect = false;
			}, this.options.reconnectInterval);
		},
		createWebSocket: function(url) {
			logger.log("createWebSocket");
			this.wsUrl = url;
			try {
				if('WebSocket' in window) {
					this.wsObj = new WebSocket(url);
				} else if('MozWebSocket' in window) {
					this.wsObj = new MozWebSocket(url);
				} else {
					this.log("当前浏览器不支持websocket协议,建议使用现代浏览器")
				}
				this.initEventHandle();
			} catch(e) {
				this.reconnect(url);
			}
			return this.wsObj;
		},
		SendMessage: function(msg) {
			if(this.wsObj.readyState == WebSocket.OPEN) {
				logger.log("WebSocket Send", msg);
				this.wsObj.send(msg);
				return true;
			} else {
				logger.log("WebSocket Not Ready");
				return false;
			}
		},
		initEventHandle: function() {
			self = this;
			this.wsObj.onclose = function() {
				logger.log("onclose");
				self.reconnect(self.wsUrl);
			};
			this.wsObj.onerror = function(err) {
				logger.log("onerror");
				self.reconnect(self.wsUrl);
			};
			this.wsObj.onopen = function() {
				logger.log("onopen");
				
				if(self.OnOpen){
					self.OnOpen();
					self.OnOpen = null;
				}
				self.heartCheck.start();
			};
			this.wsObj.onmessage = function(event) {
				self.heartCheck.reset();

				if(event.data && self.OnMessage) {
					self.OnMessage(event.data);
				}
			}
		},
		AddOpenHandlerOnece:function(fn) {
			this.OnOpen = fn;
		},
		OnOpen: null,
		OnMessage: null,
		heartCheck: {
			timeout: 60000, //60s
			timeoutObj: null,
			serverTimeoutObj: null,
			reset: function() {
				clearTimeout(this.timeoutObj);
				clearTimeout(this.serverTimeoutObj);　　　　
				this.start();
			},
			start: function() {
				var self = this;
				this.timeoutObj = setTimeout(function() {
					ws.wsObj.send("{'cmd':'Ping'}");
					self.serverTimeoutObj = setTimeout(function() {
						ws.wsObj.close();
						//如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次
					}, self.timeout)
				}, this.timeout)
			},
		}
	}

	return ws;
});
define('Proto',[], function() {

	var CMDConst = {

		Cmd_VideoInfo: 'VideoInfo',
		Cmd_PlaySmell: 'PlaySmell',
		Cmd_StopPlay: 'StopPlay',
		Cmd_PlayScript: 'PlayScript',
		Cmd_ScriptJump: 'ScriptJump',
		Cmd_ScriptPause: 'ScriptPause',
		Cmd_ScriptContinue: 'ScriptContinue',
		Cmd_ScriptStop: 'ScriptStop',
	};

	var proto = {
		getParameterName: function(fn) {
			if(typeof fn !== 'object' && typeof fn !== 'function') return;
			const COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
			const DEFAULT_PARAMS = /=[^,)]+/mg;
			const FAT_ARROWS = /=>.*$/mg;
			var code = fn.prototype ? fn.prototype.constructor.toString() : fn.toString();
			code = code
				.replace(COMMENTS, '')
				.replace(FAT_ARROWS, '')
				.replace(DEFAULT_PARAMS, '');
			var result = code.slice(code.indexOf('(') + 1, code.indexOf(')')).match(/([^\s,]+)/g);
			return result === null ? [] : result;
		},
		AssembleProto: function(cmd, params) {
			var result = {
				cmd: cmd,
			};
			if(params) {
				result['params'] = params;
			}
			return JSON.stringify(result);
		},
		AssembleProtoAuto: function(cmd, paramNames, params) {
			var result = {
				cmd: cmd,
			};
			if(params && paramNames && params.length > 0 && paramNames.length > 0) {
				result['params'] = {};
				for(var i = 0; i < params.length; i++) {
					result['params'][paramNames[i]] = params[i];
				}
			}
			return JSON.stringify(result);
		},
		Cmd_VideoInfo: function(url, name, length) {
			return this.AssembleProtoAuto(CMDConst.Cmd_VideoInfo, [
				'url', 'name', 'length'
			], arguments);
		},

		Cmd_PlaySmell: function(smell, duration, channel) {
			return this.AssembleProtoAuto(CMDConst.Cmd_PlaySmell, [
				'smell', 'duration', 'channel'
			], arguments);
		},
		Cmd_StopPlay: function(channel) {
			return this.AssembleProtoAuto(CMDConst.Cmd_StopPlay, [
				'channel'
			], arguments);
		},
		Cmd_PlayScript: function(start, script_id) {
			return this.AssembleProtoAuto(CMDConst.Cmd_PlayScript, [
				'start', 'script_id'
			], arguments);
		},
		Cmd_ScriptJump: function(start) {
			return this.AssembleProtoAuto(CMDConst.Cmd_ScriptJump, [
				'start'
			], arguments);
		},
		Cmd_ScriptPause: function() {
			return this.AssembleProtoAuto(CMDConst.Cmd_ScriptPause);
		},
		Cmd_ScriptContinue: function() {
			return this.AssembleProtoAuto(CMDConst.Cmd_ScriptContinue);
		},
		Cmd_ScriptStop: function() {
			return this.AssembleProtoAuto(CMDConst.Cmd_ScriptStop);
		},
	};

	return proto;

});
define('SDK',['WS', 'Utils', 'Logger', 'Proto'], function(ws, Utils, Logger, Proto) {

	var videoObj = {
		obj: null,
		tag: "",
		Ready: function() {
			return this.obj ? true : false;
		},
		CurrentTime: function() {

			return parseInt(this.obj.currentTime * 1000);
		},
		Duration: function() {
			return parseInt(this.obj.duration * 1000);
		},
		IsValidVideo: function() {
			return this.Ready() && this.Duration() > 900000;
		}
	}
	var logger = Logger;

	var MainWorker = {
		// 视频标签选择器
		videoSeletor: "",
		// 标题选择器
		titleSelector: "",
		// 底盘对象封装
		videoObj: videoObj,
		// 当前执行函数下标
		Index: 0,
		// 函数栈，实现链式调用
		Stack: [],
		// 添加调用函数
		AddCall: function(fn) {
			this.Stack.push(fn);
		},
		// 执行下一个函数
		NextStep: function() {
			if(this.Index < this.Stack.length) {

				var fn = this.Stack[this.Index];
				this.Index++;
				if(typeof fn === 'function') {
					fn();
				}
			}

		},
		// 执行函数栈
		Run: function() {
			this.NextStep();
		},
		// 循环监测时间：上一次播放器时间
		Watcher_lastTime: 0,
		// 循环监测时间：监测间隔
		Watcher_loopInterval: 2000,
		// 第一步：分析网站类型，获取不通的选择器
		Step_01_AnalyseWebSite: function() {
			var self = this;
			self.AddCall(function() {
				var urlHost = window.location.host;
				// 先判断 爱奇艺
				if(urlHost.indexOf("iqiyi") > -1) {
					self.videoSeletor = "#flashbox video";
					self.titleSelector = ".header-link";
					self.videoObj.tag = 'iqiyi';
					self.NextStep();
				} else if(urlHost.indexOf("youku") > -1) {
					self.videoSeletor = '#ykPlayer video';
					self.videoObj.tag = 'youku';
					self.titleSelector = "#left-title-content-wrap .subtitle";
					self.NextStep();
				} else {}

			})
			return this;
		},
		// 第二步：获取页面上的视频元素和名称
		Step_02_GetVideoElemenet: function() {
			var self = this;
			self.AddCall(function() {
				var videoSeletor = self.videoSeletor;
				var titleSelector = self.titleSelector;
				// 获取 播放器 标签
				var $video = document.querySelector(videoSeletor);
				var videoObj = self.videoObj;

				if(!$video) {
					// 优酷延时载入视频
					// 载入时未找到视频标签
					var GetVideoTimer = setInterval(function() {
						$video = document.querySelector(videoSeletor);
						var video_name = document.querySelector(titleSelector).innerHTML;
						logger.log(videoObj.tag, video_name, "video=", $video);
						if($video) {
							videoObj.obj = $video;
							videoObj.name = video_name;
							clearInterval(GetVideoTimer)
							self.NextStep();
						}
					}, 2000);
				} else {
					videoObj.obj = $video;
					videoObj.name = document.querySelector(titleSelector).innerHTML;
					logger.log(videoObj.tag, videoObj.name, "video=", videoObj.obj);
					self.NextStep();
				}
			})
			return this;

		},
		// 第三部：获取合法的视频信息（过滤广告）
		Step_03_GetValidVideoInfo: function() {
			var self = this;
			self.AddCall(function() {
				var videoObj = self.videoObj;
				var movie_start = false;
				// 更改 定时 同步
				var _WaitVideoTimer = setInterval(function() {
					if(videoObj.Ready()) {
						logger.log("video pos=", videoObj.name, videoObj.CurrentTime(), "/", videoObj.Duration());
						if(!movie_start && videoObj.IsValidVideo()) {
							movie_start = true;
							clearInterval(_WaitVideoTimer);
							self.NextStep();
							return;
						}
					}
				}, 5000);
			})
			return this;
		},
		// 第四步：询问 客户端，该视频是否有脚本
		Step_04_AskClientForScript: function() {
			var self = this;
			self.AddCall(function() {
				var videoObj = self.videoObj;
				var script_id = 0;
				ws.createWebSocket("ws://127.0.0.1:38950/SmellPlayer");
				ws.OnMessage = function(data) {
					logger.log("OnMessage Data", data);
					data = JSON.parse(data)
					var lowerCmd = data['cmd'].toString().toLowerCase();
					if(lowerCmd == 'scriptjump') {

						//		Success = 0,
						//      CtlNotConnected = 1,
						//      ParamsValidateFailed = 2,
						//      JsonDecodeError = 3,
						//      CmdNotSupported = 4,
						//
						//      NotScripting = 102,
						//      ScriptSyntaxError = 103,
						//      ScriptNotFound = 104,
						//      StartTimeLargerThanMaxTime = 105,
						//      AlreadyPaused = 106,
						//      NotPaused = 107,
						//      Unknown = 108,
						//      None,
						//      

						if(data['code'] == 102) {
							if(script_id) {
								var ptime = videoObj.CurrentTime();
								self.Watcher_lastTime = ptime;
								ws.SendMessage(Proto.Cmd_PlayScript(ptime, script_id));
							} else {
								logger.log("Jump Failed", "Script Not Played");
							}
						}
					}
					if(data && data['code'] == 0 && data['cmd'] && lowerCmd == 'videoinfo') {
						logger.log("Get Script And Play");
						script_id = parseInt(data['data']['script_id']);
						var script_length_ms = parseInt(data['data']['script_length_ms']);
						logger.log("script_id script_length_ms", script_id, script_length_ms);
						ws.SendMessage(Proto.Cmd_PlayScript(videoObj.Duration(), script_id));
						self.NextStep();
					}
				}
				ws.AddOpenHandlerOnece(function() {
					ws.SendMessage(Proto.Cmd_VideoInfo(window.location.href, videoObj.name, videoObj.Duration()));
				});
			})
			return this;
		},
		// 第五步：播放脚本
		Step_05_PlayScript: function() {
			var self = this;
			self.AddCall(function() {
				self.NextStep();
			})
			return this;
		},
		// 视频播放状态机
		VideoState: {
			state: 'play',
			play: function() {
				switch(this.state) {
					case 'standby':
						break;
					case 'play':
						break;
					case 'pause':
						ws.SendMessage(Proto.Cmd_ScriptContinue());
						break;
					case 'ended':
						ws.SendMessage(Proto.Cmd_ScriptContinue());
						break;
				}
				this.state = 'play';
			},
			pause: function() {
				switch(this.state) {
					case 'standby':
						ws.SendMessage(Proto.Cmd_ScriptPause());
						break;
					case 'play':
						ws.SendMessage(Proto.Cmd_ScriptPause());
						break;
					case 'pause':
						break;
					case 'ended':
						break;
				}
				this.state = 'pause';
			},
			ended: function() {
				switch(this.state) {
					case 'standby':
						ws.SendMessage(Proto.Cmd_ScriptPause());
						break;
					case 'play':
						ws.SendMessage(Proto.Cmd_ScriptPause());
						break;
					case 'pause':
						break;
					case 'ended':
						break;
				}
				this.state = 'ended';
			},
		},
		// 第五步：添加播放器事件
		Step_06_ListenVideoEvent: function() {
			var self = this;
			self.AddCall(function() {
				var videoObj = self.videoObj;

				var VideoState = self.VideoState;

				videoObj.obj.onplay = function() {
					logger.log("onplay");
					VideoState.play();
				}
				videoObj.obj.onpause = function() {
					logger.log("onpause");
					VideoState.pause();
				}
				videoObj.obj.onended = function() {
					logger.log("onended");
					VideoState.ended();
				}
				self.NextStep();
			})
			return this;
		},
		// 第七步：循环定时同步播放时间
		Step_07_SyncScriptPosition: function() {
			var self = this;
			self.AddCall(function() {
				// 每十次监测，强制加入 一次同步

				var checkLoopTime = 1;
				var videoObj = self.videoObj;
				var _WatherTimer = setInterval(function() {

					if(self.VideoState.state != 'play')
						return;

					var nowTime = videoObj.CurrentTime();

					// logger.log("_WatherTimer", self.Watcher_lastTime,nowTime,checkLoopTime);

					if(checkLoopTime % 20 == 0 || Math.abs(nowTime - self.Watcher_loopInterval - self.Watcher_lastTime) > 100) {
						logger.log("video Jump =>", nowTime, " / ", videoObj.Duration());
						ws.SendMessage(Proto.Cmd_ScriptJump(nowTime));
					}
					checkLoopTime++;
					self.Watcher_lastTime = nowTime;
				}, self.Watcher_loopInterval);
			})
			return this;
		}
	};

	MainWorker
		.Step_01_AnalyseWebSite()
		.Step_02_GetVideoElemenet()
		.Step_03_GetValidVideoInfo()
		.Step_04_AskClientForScript()
		.Step_05_PlayScript()
		.Step_06_ListenVideoEvent()
		.Step_07_SyncScriptPosition()
		.Run();

	return {
		'ws': ws,
		'utils': Utils,
		'logger': Logger
	};
});
require([ 'SDK'], function(SDK) {
	console.log("this is main")
    return SDK;
});
define("../build/SDK-compress", function(){});

